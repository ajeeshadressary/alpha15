'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _chai = require('chai');

var _mocha = require('mocha');

var _starWarsSchema = require('./starWarsSchema.js');

var _graphql = require('graphql');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 80+ char lines are useful in describe/it, so ignore in this file.
/* eslint-disable max-len */

/**
 *  Copyright (c) 2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 */

(0, _mocha.describe)('Star Wars mutations', function () {
  (0, _mocha.it)('mutates the data set', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var mutation, params, expected, result;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mutation = `
      mutation AddBWingQuery($input: IntroduceShipInput!) {
        introduceShip(input: $input) {
          ship {
            id
            name
          }
          faction {
            name
          }
          clientMutationId
        }
      }
    `;
            params = {
              input: {
                shipName: 'B-Wing',
                factionId: '1',
                clientMutationId: 'abcde'
              }
            };
            expected = {
              introduceShip: {
                ship: {
                  id: 'U2hpcDo5',
                  name: 'B-Wing'
                },
                faction: {
                  name: 'Alliance to Restore the Republic'
                },
                clientMutationId: 'abcde'
              }
            };
            _context.next = 5;
            return (0, _graphql.graphql)(_starWarsSchema.StarWarsSchema, mutation, null, null, params);

          case 5:
            result = _context.sent;

            (0, _chai.expect)(result).to.deep.equal({ data: expected });

          case 7:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));
});