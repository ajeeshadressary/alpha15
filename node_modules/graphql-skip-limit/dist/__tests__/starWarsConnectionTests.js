'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _chai = require('chai');

var _mocha = require('mocha');

var _starWarsSchema = require('./starWarsSchema.js');

var _graphql = require('graphql');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// 80+ char lines are useful in describe/it, so ignore in this file.
/* eslint-disable max-len */

/**
 *  Copyright (c) 2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 */

(0, _mocha.describe)('Star Wars connections', function () {
  (0, _mocha.it)('fetches the first ship of the rebels', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var query, expected, result;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            query = `
      query RebelsShipsQuery {
        rebels {
          name,
          ships(first: 1) {
            edges {
              node {
                name
              }
            }
          }
        }
      }
    `;
            expected = {
              rebels: {
                name: 'Alliance to Restore the Republic',
                ships: {
                  edges: [{
                    node: {
                      name: 'X-Wing'
                    }
                  }]
                }
              }
            };
            _context.next = 4;
            return (0, _graphql.graphql)(_starWarsSchema.StarWarsSchema, query);

          case 4:
            result = _context.sent;

            (0, _chai.expect)(result).to.deep.equal({ data: expected });

          case 6:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, undefined);
  })));

  (0, _mocha.it)('fetches the first two ships of the rebels with a cursor', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2() {
    var query, expected, result;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            query = `
      query MoreRebelShipsQuery {
        rebels {
          name,
          ships(first: 2) {
            edges {
              cursor,
              node {
                name
              }
            }
          }
        }
      }
    `;
            expected = {
              rebels: {
                name: 'Alliance to Restore the Republic',
                ships: {
                  edges: [{
                    cursor: 'YXJyYXljb25uZWN0aW9uOjA=',
                    node: {
                      name: 'X-Wing'
                    }
                  }, {
                    cursor: 'YXJyYXljb25uZWN0aW9uOjE=',
                    node: {
                      name: 'Y-Wing'
                    }
                  }]
                }
              }
            };
            _context2.next = 4;
            return (0, _graphql.graphql)(_starWarsSchema.StarWarsSchema, query);

          case 4:
            result = _context2.sent;

            (0, _chai.expect)(result).to.deep.equal({ data: expected });

          case 6:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  })));

  (0, _mocha.it)('fetches the next three ships of the rebels with a cursor', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee3() {
    var query, expected, result;
    return _regenerator2.default.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            query = `
      query EndOfRebelShipsQuery {
        rebels {
          name,
          ships(first: 3 after: "YXJyYXljb25uZWN0aW9uOjE=") {
            edges {
              cursor,
              node {
                name
              }
            }
          }
        }
      }
    `;
            expected = {
              rebels: {
                name: 'Alliance to Restore the Republic',
                ships: {
                  edges: [{
                    cursor: 'YXJyYXljb25uZWN0aW9uOjI=',
                    node: {
                      name: 'A-Wing'
                    }
                  }, {
                    cursor: 'YXJyYXljb25uZWN0aW9uOjM=',
                    node: {
                      name: 'Millenium Falcon'
                    }
                  }, {
                    cursor: 'YXJyYXljb25uZWN0aW9uOjQ=',
                    node: {
                      name: 'Home One'
                    }
                  }]
                }
              }
            };
            _context3.next = 4;
            return (0, _graphql.graphql)(_starWarsSchema.StarWarsSchema, query);

          case 4:
            result = _context3.sent;

            (0, _chai.expect)(result).to.deep.equal({ data: expected });

          case 6:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, undefined);
  })));

  (0, _mocha.it)('fetches no ships of the rebels at the end of connection', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee4() {
    var query, expected, result;
    return _regenerator2.default.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            query = `
      query RebelsQuery {
        rebels {
          name,
          ships(first: 3 after: "YXJyYXljb25uZWN0aW9uOjQ=") {
            edges {
              cursor,
              node {
                name
              }
            }
          }
        }
      }
    `;
            expected = {
              rebels: {
                name: 'Alliance to Restore the Republic',
                ships: {
                  edges: []
                }
              }
            };
            _context4.next = 4;
            return (0, _graphql.graphql)(_starWarsSchema.StarWarsSchema, query);

          case 4:
            result = _context4.sent;

            (0, _chai.expect)(result).to.deep.equal({ data: expected });

          case 6:
          case 'end':
            return _context4.stop();
        }
      }
    }, _callee4, undefined);
  })));

  (0, _mocha.it)('identifies the end of the list', (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee5() {
    var query, expected, result;
    return _regenerator2.default.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            query = `
      query EndOfRebelShipsQuery {
        rebels {
          name,
          originalShips: ships(first: 2) {
            edges {
              node {
                name
              }
            }
            pageInfo {
              hasNextPage
            }
          }
          moreShips: ships(first: 3 after: "YXJyYXljb25uZWN0aW9uOjE=") {
            edges {
              node {
                name
              }
            }
            pageInfo {
              hasNextPage
            }
          }
        }
      }
    `;
            expected = {
              rebels: {
                name: 'Alliance to Restore the Republic',
                originalShips: {
                  edges: [{
                    node: {
                      name: 'X-Wing'
                    }
                  }, {
                    node: {
                      name: 'Y-Wing'
                    }
                  }],
                  pageInfo: {
                    hasNextPage: true
                  }
                },
                moreShips: {
                  edges: [{
                    node: {
                      name: 'A-Wing'
                    }
                  }, {
                    node: {
                      name: 'Millenium Falcon'
                    }
                  }, {
                    node: {
                      name: 'Home One'
                    }
                  }],
                  pageInfo: {
                    hasNextPage: false
                  }
                }
              }
            };
            _context5.next = 4;
            return (0, _graphql.graphql)(_starWarsSchema.StarWarsSchema, query);

          case 4:
            result = _context5.sent;

            (0, _chai.expect)(result).to.deep.equal({ data: expected });

          case 6:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, undefined);
  })));
});