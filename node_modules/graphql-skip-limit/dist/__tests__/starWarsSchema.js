'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StarWarsSchema = undefined;

var _graphql = require('graphql');

var _node = require('../node/node.js');

var _arrayconnection = require('../connection/arrayconnection.js');

var _connection = require('../connection/connection.js');

var _mutation = require('../mutation/mutation.js');

var _starWarsData = require('./starWarsData.js');

/**
 * This is a basic end-to-end test, designed to demonstrate the various
 * capabilities of a Relay-compliant GraphQL server.
 *
 * It is recommended that readers of this test be familiar with
 * the end-to-end test in GraphQL.js first, as this test skips
 * over the basics covered there in favor of illustrating the
 * key aspects of the Relay spec that this test is designed to illustrate.
 *
 * We will create a GraphQL schema that describes the major
 * factions and ships in the original Star Wars trilogy.
 *
 * NOTE: This may contain spoilers for the original Star
 * Wars trilogy.
 */

/**
 * Using our shorthand to describe type systems, the type system for our
 * example will be the followng:
 *
 * interface Node {
 *   id: ID!
 * }
 *
 * type Faction : Node {
 *   id: ID!
 *   name: String
 *   ships: ShipConnection
 * }
 *
 * type Ship : Node {
 *   id: ID!
 *   name: String
 * }
 *
 * type ShipConnection {
 *   edges: [ShipEdge]
 *   pageInfo: PageInfo!
 * }
 *
 * type ShipEdge {
 *   cursor: String!
 *   node: Ship
 * }
 *
 * type PageInfo {
 *   hasNextPage: Boolean!
 *   hasPreviousPage: Boolean!
 *   startCursor: String
 *   endCursor: String
 * }
 *
 * type Query {
 *   rebels: Faction
 *   empire: Faction
 *   node(id: ID!): Node
 * }
 *
 * input IntroduceShipInput {
 *   clientMutationId: string
 *   shipName: string!
 *   factionId: ID!
 * }
 *
 * type IntroduceShipPayload {
 *   clientMutationId: string
 *   ship: Ship
 *   faction: Faction
 * }
 *
 * type Mutation {
 *   introduceShip(input IntroduceShipInput!): IntroduceShipPayload
 * }
 */

/**
 * We get the node interface and field from the relay library.
 *
 * The first method is the way we resolve an ID to its object. The second is the
 * way we resolve an object that implements node to its type.
 */
/**
 *  Copyright (c) 2015, Facebook, Inc.
 *  All rights reserved.
 *
 *  This source code is licensed under the BSD-style license found in the
 *  LICENSE file in the root directory of this source tree. An additional grant
 *  of patent rights can be found in the PATENTS file in the same directory.
 */

var _nodeDefinitions = (0, _node.nodeDefinitions)(function (globalId) {
  var _fromGlobalId = (0, _node.fromGlobalId)(globalId),
      type = _fromGlobalId.type,
      id = _fromGlobalId.id;

  if (type === 'Faction') {
    return (0, _starWarsData.getFaction)(id);
  }
  if (type === 'Ship') {
    return (0, _starWarsData.getShip)(id);
  }
}, function (obj) {
  return obj.ships ? factionType : shipType;
}),
    nodeInterface = _nodeDefinitions.nodeInterface,
    nodeField = _nodeDefinitions.nodeField;

/**
 * We define our basic ship type.
 *
 * This implements the following type system shorthand:
 *   type Ship : Node {
 *     id: String!
 *     name: String
 *   }
 */


var shipType = new _graphql.GraphQLObjectType({
  name: 'Ship',
  description: 'A ship in the Star Wars saga',
  interfaces: [nodeInterface],
  fields: function fields() {
    return {
      id: (0, _node.globalIdField)(),
      name: {
        type: _graphql.GraphQLString,
        description: 'The name of the ship.'
      }
    };
  }
});

/**
 * We define a connection between a faction and its ships.
 *
 * connectionType implements the following type system shorthand:
 *   type ShipConnection {
 *     edges: [ShipEdge]
 *     pageInfo: PageInfo!
 *   }
 *
 * connectionType has an edges field - a list of edgeTypes that implement the
 * following type system shorthand:
 *   type ShipEdge {
 *     cursor: String!
 *     node: Ship
 *   }
 */

var _connectionDefinition = (0, _connection.connectionDefinitions)({ nodeType: shipType }),
    shipConnection = _connectionDefinition.connectionType;

/**
 * We define our faction type, which implements the node interface.
 *
 * This implements the following type system shorthand:
 *   type Faction : Node {
 *     id: String!
 *     name: String
 *     ships: ShipConnection
 *   }
 */


var factionType = new _graphql.GraphQLObjectType({
  name: 'Faction',
  description: 'A faction in the Star Wars saga',
  interfaces: [nodeInterface],
  fields: function fields() {
    return {
      id: (0, _node.globalIdField)(),
      name: {
        type: _graphql.GraphQLString,
        description: 'The name of the faction.'
      },
      ships: {
        type: shipConnection,
        description: 'The ships used by the faction.',
        args: _connection.connectionArgs,
        resolve: function resolve(faction, args) {
          return (0, _arrayconnection.connectionFromArray)(faction.ships.map(_starWarsData.getShip), args);
        }
      }
    };
  }
});

/**
 * This is the type that will be the root of our query, and the
 * entry point into our schema.
 *
 * This implements the following type system shorthand:
 *   type Query {
 *     rebels: Faction
 *     empire: Faction
 *     node(id: String!): Node
 *   }
 */
var queryType = new _graphql.GraphQLObjectType({
  name: 'Query',
  fields: function fields() {
    return {
      rebels: {
        type: factionType,
        resolve: function resolve() {
          return (0, _starWarsData.getRebels)();
        }
      },
      empire: {
        type: factionType,
        resolve: function resolve() {
          return (0, _starWarsData.getEmpire)();
        }
      },
      node: nodeField
    };
  }
});

/**
 * This will return a GraphQLFieldConfig for our ship
 * mutation.
 *
 * It creates these two types implicitly:
 *   input IntroduceShipInput {
 *     clientMutationId: string
 *     shipName: string!
 *     factionId: ID!
 *   }
 *
 *   type IntroduceShipPayload {
 *     clientMutationId: string
 *     ship: Ship
 *     faction: Faction
 *   }
 */
var shipMutation = (0, _mutation.mutationWithClientMutationId)({
  name: 'IntroduceShip',
  inputFields: {
    shipName: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLString)
    },
    factionId: {
      type: new _graphql.GraphQLNonNull(_graphql.GraphQLID)
    }
  },
  outputFields: {
    ship: {
      type: shipType,
      resolve: function resolve(payload) {
        return (0, _starWarsData.getShip)(payload.shipId);
      }
    },
    faction: {
      type: factionType,
      resolve: function resolve(payload) {
        return (0, _starWarsData.getFaction)(payload.factionId);
      }
    }
  },
  mutateAndGetPayload: function mutateAndGetPayload(_ref) {
    var shipName = _ref.shipName,
        factionId = _ref.factionId;

    var newShip = (0, _starWarsData.createShip)(shipName, factionId);
    return {
      shipId: newShip.id,
      factionId
    };
  }
});

/**
 * This is the type that will be the root of our mutations, and the
 * entry point into performing writes in our schema.
 *
 * This implements the following type system shorthand:
 *   type Mutation {
 *     introduceShip(input IntroduceShipInput!): IntroduceShipPayload
 *   }
 */
var mutationType = new _graphql.GraphQLObjectType({
  name: 'Mutation',
  fields: function fields() {
    return {
      introduceShip: shipMutation
    };
  }
});

/**
 * Finally, we construct our schema (whose starting query type is the query
 * type we defined above) and export it.
 */
var StarWarsSchema = exports.StarWarsSchema = new _graphql.GraphQLSchema({
  query: queryType,
  mutation: mutationType
});