"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require("graphql"),
    GraphQLInputObjectType = _require.GraphQLInputObjectType,
    GraphQLBoolean = _require.GraphQLBoolean,
    GraphQLString = _require.GraphQLString,
    GraphQLFloat = _require.GraphQLFloat,
    GraphQLInt = _require.GraphQLInt,
    GraphQLList = _require.GraphQLList,
    GraphQLEnumType = _require.GraphQLEnumType,
    GraphQLNonNull = _require.GraphQLNonNull;

var _ = require("lodash");
var moment = require("moment");
var typeOf = require("type-of");

var _require2 = require("./data-tree-utils"),
    extractFieldExamples = _require2.extractFieldExamples,
    buildFieldEnumValues = _require2.buildFieldEnumValues;

var typeFields = function typeFields(type) {
  switch (type) {
    case `boolean`:
      return {
        eq: { type: GraphQLBoolean },
        ne: { type: GraphQLBoolean }
      };
    case `string`:
      return {
        eq: { type: GraphQLString },
        ne: { type: GraphQLString },
        regex: { type: GraphQLString },
        glob: { type: GraphQLString }
      };
    case `int`:
      return {
        eq: { type: GraphQLInt },
        ne: { type: GraphQLInt }
      };
    case `float`:
      return {
        eq: { type: GraphQLFloat },
        ne: { type: GraphQLFloat }
      };
  }
};

var inferGraphQLInputFields = exports.inferGraphQLInputFields = function (value, key, nodes) {
  var selector = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : ``;
  var namespace = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : ``;

  switch (typeOf(value)) {
    case `array`:
      var headType = typeOf(value[0]);
      // Check if headType is a number.
      if (headType === `number`) {
        if (value[0] % 1 === 0) {
          headType = `int`;
        } else {
          headType = `float`;
        }
      }

      // Determine type for in operator.
      var inType = void 0;
      switch (headType) {
        case `int`:
          inType = GraphQLInt;
          break;
        case `float`:
          inType = GraphQLFloat;
          break;
        case `string`:
          inType = GraphQLString;
          break;
        case `boolean`:
          inType = GraphQLBoolean;
          break;
      }

      return {
        type: new GraphQLInputObjectType({
          name: _.camelCase(`${namespace} ${selector} ${key}QueryList`),
          fields: (0, _extends3.default)({}, typeFields(headType), {
            in: { type: new GraphQLList(inType) }
          })
        })
      };
    case `boolean`:
      return {
        type: new GraphQLInputObjectType({
          name: _.camelCase(`${namespace} ${selector} ${key}QueryBoolean`),
          fields: (0, _extends3.default)({}, typeFields(`boolean`))
        })
      };
    case `string`:
      return {
        type: new GraphQLInputObjectType({
          name: _.camelCase(`${namespace} ${selector} ${key}QueryString`),
          fields: (0, _extends3.default)({}, typeFields(`string`))
        })
      };
    case `object`:
      return {
        type: new GraphQLInputObjectType({
          name: _.camelCase(`${namespace} ${selector} ${key}InputObject`),
          fields: inferInputObjectStructureFromNodes(nodes, key, namespace)
        })
      };
    case `number`:
      if (value % 1 === 0) {
        return {
          type: new GraphQLInputObjectType({
            name: _.camelCase(`${namespace} ${selector} ${key}QueryNumber`),
            fields: (0, _extends3.default)({}, typeFields(`int`))
          })
        };
      } else {
        return {
          type: new GraphQLInputObjectType({
            name: _.camelCase(`${namespace} ${selector} ${key}QueryFloat`),
            fields: (0, _extends3.default)({}, typeFields(`float`))
          })
        };
      }
    default:
      return null;
  }
};

var inferInputObjectStructureFromNodes = exports.inferInputObjectStructureFromNodes = function (nodes, selector, namespace) {
  var fieldExamples = extractFieldExamples({
    nodes,
    selector,
    deleteNodeFields: true
  });

  var inferredFields = {};
  _.each(fieldExamples, function (v, k) {
    inferredFields[k] = inferGraphQLInputFields(v, k, nodes, selector, namespace);
  });

  // Add sorting (but only to the top level).
  if (!selector || selector === ``) {
    var enumValues = buildFieldEnumValues(nodes);

    var SortByType = new GraphQLEnumType({
      name: `${namespace}SortByFieldsEnum`,
      values: enumValues
    });

    inferredFields.sortBy = {
      type: new GraphQLInputObjectType({
        name: _.camelCase(`${namespace} sortBy`),
        fields: {
          fields: {
            name: _.camelCase(`${namespace} sortByFields`),
            type: new GraphQLNonNull(new GraphQLList(SortByType))
          },
          order: {
            name: _.camelCase(`${namespace} sortOrder`),
            defaultValue: `asc`,
            type: new GraphQLEnumType({
              name: _.camelCase(`${namespace} sortOrderValues`),
              values: {
                ASC: { value: `asc` },
                DESC: { value: `desc` }
              }
            })
          }
        }
      })
    };
  }

  return inferredFields;
};