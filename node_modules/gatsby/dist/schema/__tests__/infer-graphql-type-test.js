"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

test(`Infers graphql type from array of nodes`, function () {
  var _require = require("../infer-graphql-type"),
      inferObjectStructureFromNodes = _require.inferObjectStructureFromNodes;

  var _require2 = require("graphql"),
      graphql = _require2.graphql,
      GraphQLObjectType = _require2.GraphQLObjectType,
      GraphQLList = _require2.GraphQLList,
      GraphQLSchema = _require2.GraphQLSchema;

  var nodes = [{
    id: `foo`,
    name: `The Mad Max`,
    type: `Test`,
    hair: 1,
    date: `1012-11-01`,
    anArray: [1, 2, 3, 4],
    externalUrl: `https://example.com/awesome.jpg`,
    frontmatter: {
      date: `1012-11-01`,
      title: `The world of dash and adventure`,
      blue: 100
    }
  }, {
    id: `boo`,
    name: `The Mad Wax`,
    type: `Test`,
    hair: 2,
    date: `1984-10-12`,
    anArray: [1, 2, 5, 4],
    frontmatter: {
      date: `1984-10-12`,
      title: `The world of slash and adventure`,
      blue: 10010
    }
  }];
  var inferredFields = inferObjectStructureFromNodes({
    nodes,
    types: [{ name: `Test` }]
  });
  var nodeType = new GraphQLObjectType({
    name: `TEST`,
    fields: (0, _extends3.default)({}, inferredFields)
  });
  var listNode = {
    name: `LISTNODE`,
    type: new GraphQLList(nodeType),
    resolve() {
      return nodes;
    }
  };
  var schema = new GraphQLSchema({
    query: new GraphQLObjectType({
      name: `RootQueryType`,
      fields: function fields() {
        return {
          listNode
        };
      }
    })
  });
  graphql(schema, `
        {
          listNode {
            hair,
            anArray,
            externalUrl,
            date(formatString: "YYYY"),
            frontmatter {
              title,
              date(formatString: "YYYY")
            }
          }
        }
        `).then(function (result) {
    return expect(result).toEqual({
      data: {
        listNode: [{
          hair: 1,
          anArray: [1, 2, 3, 4],
          externalUrl: `https://example.com/awesome.jpg`,
          date: `1012`,
          frontmatter: {
            date: `1012`,
            title: `The world of dash and adventure`
          }
        }, {
          hair: 2,
          anArray: [1, 2, 5, 4],
          externalUrl: null,
          date: `1984`,
          frontmatter: {
            date: `1984`,
            title: `The world of slash and adventure`
          }
        }]
      }
    });
  });
});