"use strict";

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _ = require("lodash");
var runSift = require("../run-sift");

var _require = require("graphql-skip-limit"),
    connectionFromArray = _require.connectionFromArray,
    connectionArgs = _require.connectionArgs,
    connectionDefinitions = _require.connectionDefinitions;

var buildConnectionFields = require("../build-connection-fields");

describe(`GraphQL Input args`, function () {
  var _require2 = require("../infer-graphql-type"),
      inferObjectStructureFromNodes = _require2.inferObjectStructureFromNodes;

  var _require3 = require("../infer-graphql-input-fields"),
      inferInputObjectStructureFromNodes = _require3.inferInputObjectStructureFromNodes;

  var _require4 = require("graphql"),
      graphql = _require4.graphql,
      GraphQLObjectType = _require4.GraphQLObjectType,
      GraphQLSchema = _require4.GraphQLSchema;

  var nodes = [{
    name: `The Mad Max`,
    hair: 1,
    date: `2006-07-22T22:39:53.000Z`,
    anArray: [1, 2, 3, 4],
    frontmatter: {
      date: `2006-07-22T22:39:53.000Z`,
      title: `The world of dash and adventure`,
      blue: 100
    }
  }, {
    name: `The Mad Wax`,
    hair: 2,
    date: `2006-07-22T22:39:53.000Z`,
    anArray: [1, 2, 5, 4],
    frontmatter: {
      date: `2006-07-22T22:39:53.000Z`,
      title: `The world of slash and adventure`,
      blue: 10010,
      circle: `happy`
    }
  }];
  var inferredFields = inferObjectStructureFromNodes({ nodes });
  var inferredInputFields = inferInputObjectStructureFromNodes(nodes, ``, `test`);
  var nodeType = new GraphQLObjectType({
    name: `Test`,
    fields: (0, _extends3.default)({}, inferredFields)
  });

  var _connectionDefinition = connectionDefinitions({
    nodeType,
    connectionFields: function connectionFields() {
      return buildConnectionFields({
        name: `Test`,
        nodes,
        nodeObjectType: nodeType
      });
    }
  }),
      nodeConnection = _connectionDefinition.connectionType;

  var connection = {
    name: `nodeConnection`,
    type: nodeConnection,
    args: (0, _extends3.default)({}, connectionArgs, inferredInputFields),
    resolve(nvi, args) {
      return runSift({
        args,
        nodes,
        connection: true
      });
    }
  };

  var schema = new GraphQLSchema({
    query: new GraphQLObjectType({
      name: `RootQueryType`,
      fields: function fields() {
        return {
          allNode: connection
        };
      }
    })
  });

  it(`handles eq operator`, function () {
    return graphql(schema, `
          {
            allNode(hair: { eq: 2 }) {
              edges { node { hair }}
            }
          }
          `).then(function (result) {
      expect(result.errors).not.toBeDefined();
      expect(result.data.allNode.edges.length).toEqual(1);
      expect(result.data.allNode.edges[0].node.hair).toEqual(2);
    }).catch(function (err) {
      return expect(err).not.toBeDefined();
    });
  });

  it(`handles ne operator`, function () {
    return graphql(schema, `
          {
            allNode(hair: { ne: 2 }) {
              edges { node { hair }}
            }
          }
          `).then(function (result) {
      expect(result.errors).not.toBeDefined();
      expect(result.data.allNode.edges.length).toEqual(1);
      expect(result.data.allNode.edges[0].node.hair).toEqual(1);
    }).catch(function (err) {
      return expect(err).not.toBeDefined();
    });
  });

  it(`handles the regex operator`, function () {
    return graphql(schema, `
          {
            allNode(name: { regex: "/^the.*wax/i/" }) {
              edges { node { name }}
            }
          }
          `).then(function (result) {
      expect(result.errors).not.toBeDefined();
      expect(result.data.allNode.edges.length).toEqual(1);
      expect(result.data.allNode.edges[0].node.name).toEqual(`The Mad Wax`);
    }).catch(function (err) {
      return expect(err).not.toBeDefined();
    });
  });

  it(`handles the in operator`, function () {
    return graphql(schema, `
          {
            allNode(anArray: { in: [5] }) {
              edges { node { name }}
            }
          }
          `).then(function (result) {
      expect(result.errors).not.toBeDefined();
      expect(result.data.allNode.edges.length).toEqual(1);
      expect(result.data.allNode.edges[0].node.name).toEqual(`The Mad Wax`);
    }).catch(function (err) {
      return expect(err).not.toBeDefined();
    });
  });

  it(`handles the glob operator`, function () {
    return graphql(schema, `
          {
            allNode(limit: 10, name: { glob: "*Wax" }) {
              edges { node { name }}
            }
          }
          `).then(function (result) {
      expect(result.errors).not.toBeDefined();
      expect(result.data.allNode.edges.length).toEqual(1);
      expect(result.data.allNode.edges[0].node.name).toEqual(`The Mad Wax`);
    }).catch(function (err) {
      return expect(err).not.toBeDefined();
    });
  });

  it(`sorts results`, function () {
    return graphql(schema, `
          {
            allNode(limit: 10, sortBy: { fields: [frontmatter___blue], order: DESC } ) {
              edges { node { name }}
            }
          }
          `).then(function (result) {
      expect(result.errors).not.toBeDefined();
      expect(result.data.allNode.edges.length).toEqual(2);
      expect(result.data.allNode.edges[0].node.name).toEqual(`The Mad Wax`);
    }).catch(function (err) {
      return expect(err).not.toBeDefined();
    });
  });

  it(`returns list of distinct values in a field`, function () {
    return graphql(schema, `
          {
            allNode {
              totalCount
              names: distinct(field: name)
              array: distinct(field: anArray)
              blue: distinct(field: frontmatter___blue)
              circle: distinct(field: frontmatter___circle) # Only one node has this field
            }
          }
          `).then(function (result) {
      expect(result.errors).not.toBeDefined();

      expect(result.data.allNode.names.length).toEqual(2);
      expect(result.data.allNode.names[0]).toEqual(`The Mad Max`);

      expect(result.data.allNode.array.length).toEqual(5);
      expect(result.data.allNode.array[0]).toEqual(`1`);

      expect(result.data.allNode.blue.length).toEqual(2);
      expect(result.data.allNode.blue[0]).toEqual(`100`);

      expect(result.data.allNode.circle.length).toEqual(1);
      expect(result.data.allNode.circle[0]).toEqual(`happy`);
    }).catch(function (err) {
      return expect(err).not.toBeDefined();
    });
  });

  it(`handles the groupBy connection field`, function () {
    return graphql(schema, `
          {
            allNode {
              blue: groupBy(field: frontmatter___blue) {
                field
                fieldValue
                totalCount
              }
              anArray: groupBy(field: anArray) {
                field
                fieldValue
                totalCount
              }
            }
          }
          `).then(function (result) {
      expect(result.errors).not.toBeDefined();

      expect(result.data.allNode.blue).toHaveLength(2);
      expect(result.data.allNode.blue[0].fieldValue).toEqual(`100`);
      expect(result.data.allNode.blue[0].field).toEqual(`frontmatter.blue`);
      expect(result.data.allNode.blue[0].totalCount).toEqual(1);

      expect(result.data.allNode.anArray).toHaveLength(5);
      expect(result.data.allNode.anArray[0].fieldValue).toEqual(`1`);
      expect(result.data.allNode.anArray[0].field).toEqual(`anArray`);
      expect(result.data.allNode.anArray[0].totalCount).toEqual(2);
    }).catch(function (err) {
      return expect(err).not.toBeDefined();
    });
  });
});