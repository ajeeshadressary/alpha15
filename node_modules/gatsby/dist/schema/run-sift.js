"use strict";

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var sift = require("sift");
var _ = require("lodash");

var _require = require("graphql-skip-limit"),
    connectionFromArray = _require.connectionFromArray;

var _require2 = require("../redux/"),
    store = _require2.store;

var _require3 = require("../redux/actions/add-page-dependency"),
    addPageDependency = _require3.addPageDependency;

module.exports = function (_ref) {
  var args = _ref.args,
      nodes = _ref.nodes,
      _ref$connection = _ref.connection,
      connection = _ref$connection === undefined ? false : _ref$connection,
      _ref$path = _ref.path,
      path = _ref$path === undefined ? "" : _ref$path;

  // Clone args as for some reason graphql-js removes the constructor
  // from nested objects which breaks a check in sift.js.
  var clonedArgs = JSON.parse((0, _stringify2.default)(args));

  var siftifyArgs = function siftifyArgs(object) {
    var newObject = {};
    _.each(object, function (v, k) {
      if (_.isObject(v) && !_.isArray(v)) {
        newObject[k] = siftifyArgs(v);
      } else {
        // Compile regex first.
        if (k === `regex`) {
          var exploded = v.split(`/`);
          var regex = new RegExp(exploded[1], exploded[2]);
          newObject[`$regex`] = regex;
        } else if (k === `glob`) {
          var Minimatch = require(`minimatch`).Minimatch;
          var mm = new Minimatch(v);
          newObject[`$regex`] = mm.makeRe();
        } else {
          newObject[`$${k}`] = v;
        }
      }
    });
    return newObject;
  };
  var siftArgs = [];
  _.each(clonedArgs, function (v, k) {
    // Ignore connection and sorting args
    if (_.includes([`skip`, `limit`, `sortBy`], k)) {
      return;
    }
    var tempObject = {};
    tempObject[k] = v;
    siftArgs.push(siftifyArgs(tempObject));
  });

  var result = [];
  if (_.isEmpty(siftArgs)) {
    result = nodes;
  } else {
    result = sift({ $and: siftArgs }, nodes);
    if (!result) {
      result = [];
    }
  }

  // Sort results.
  if (clonedArgs.sortBy) {
    var convertedFields = clonedArgs.sortBy.fields.map(function (field) {
      return field.replace(`___`, `.`);
    });
    result = _.orderBy(result, convertedFields, clonedArgs.sortBy.order);
  }

  if (connection) {
    var connectionArray = connectionFromArray(result, args);
    connectionArray.totalCount = result.length;
    addPageDependency({
      path,
      connection: result[0].type
    });
    return connectionArray;
  } else {
    if (result && result.length > 0) {
      addPageDependency({
        path,
        nodeId: result[0].id
      });
    }
    return result[0];
  }
};