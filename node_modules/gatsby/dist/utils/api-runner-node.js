"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _keys = require("babel-runtime/core-js/object/keys");

var _keys2 = _interopRequireDefault(_keys);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Promise = require("bluebird");
var glob = require("glob");
var _ = require("lodash");
var mapSeries = require("async/mapSeries");

var cache = require("./cache");

// Bind action creators per plugin so can auto-add plugin
// meta-data to data they create.
var boundPluginActionCreators = {};
var doubleBind = function doubleBind(boundActionCreators, plugin) {
  if (boundPluginActionCreators[plugin.name]) {
    return boundPluginActionCreators[plugin.name];
  } else {
    var keys = (0, _keys2.default)(boundActionCreators);
    var doubleBoundActionCreators = {};

    var _loop = function _loop(i) {
      var key = keys[i];
      var boundActionCreator = boundActionCreators[key];
      if (typeof boundActionCreator === "function") {
        doubleBoundActionCreators[key] = function () {
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }

          // Only set the pluginName once (so node updaters don't
          // overwrite this).
          if (!_.has(args, "[0].pluginName")) {
            args[0].pluginName = plugin.name;
          }
          return boundActionCreator.apply(undefined, args.concat([plugin]));
        };
      }
    };

    for (var i = 0; i < keys.length; i++) {
      _loop(i);
    }
    boundPluginActionCreators[plugin.name] = doubleBoundActionCreators;
    return doubleBoundActionCreators;
  }
};

var runAPI = function runAPI(plugin, api, args) {
  var linkPrefix = ``;

  var _require = require("../redux"),
      store = _require.store,
      loadNodeContent = _require.loadNodeContent,
      getNodes = _require.getNodes,
      getNode = _require.getNode,
      hasNodeChanged = _require.hasNodeChanged,
      getNodeAndSavePathDependency = _require.getNodeAndSavePathDependency;

  var _require2 = require("../redux/actions"),
      boundActionCreators = _require2.boundActionCreators;

  // Wrap "createNode" so we can autoset the package name
  // of the plugin that creates each node.


  var doubleBoundActionCreators = doubleBind(boundActionCreators, plugin);

  if (store.getState().program.prefixLinks) {
    linkPrefix = store.getState().config.linkPrefix;
  }

  var gatsbyNode = require(`${plugin.resolve}/gatsby-node`);
  if (gatsbyNode[api]) {
    if (!_.includes([`onNodeCreate`], api)) {
      console.log(`calling api handler in ${plugin.resolve} for api ${api}`);
    }
    var result = gatsbyNode[api]((0, _extends3.default)({}, args, {
      linkPrefix,
      boundActionCreators: doubleBoundActionCreators,
      loadNodeContent,
      store,
      getNodes,
      getNode,
      hasNodeChanged,
      getNodeAndSavePathDependency,
      cache
    }), plugin.pluginOptions);

    return Promise.resolve(result);
  }

  return null;
};

var filteredPlugins = void 0;
var hasAPIFile = function hasAPIFile(plugin) {
  return glob.sync(`${plugin.resolve}/gatsby-node*`)[0];
};

module.exports = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(api) {
    var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            return _context.abrupt("return", new Promise(function (resolve) {
              var _require3 = require("../redux"),
                  store = _require3.store;

              var plugins = store.getState().flattenedPlugins;
              // Get the list of plugins that implement gatsby-node
              if (!filteredPlugins) {
                filteredPlugins = plugins.filter(function (plugin) {
                  return hasAPIFile(plugin);
                });
              }
              mapSeries(filteredPlugins, function (plugin, callback) {
                Promise.resolve(runAPI(plugin, api, args)).asCallback(callback);
              }, function (err, results) {
                // Filter out empty responses and return
                resolve(results.filter(function (result) {
                  return !_.isEmpty(result);
                }));
              });
            }));

          case 1:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();