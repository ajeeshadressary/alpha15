"use strict";

var _joi = require("joi");

var _joi2 = _interopRequireDefault(_joi);

var _chalk = require("chalk");

var _chalk2 = _interopRequireDefault(_chalk);

var _joi3 = require("../joi-schemas/joi");

var joiSchemas = _interopRequireWildcard(_joi3);

var _jsChunkNames = require("../utils/js-chunk-names");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _ = require("lodash");

var _require = require("redux"),
    bindActionCreators = _require.bindActionCreators;

var _require2 = require("./index"),
    getNode = _require2.getNode,
    hasNodeChanged = _require2.hasNodeChanged;

var _require3 = require("./index"),
    store = _require3.store;

var actions = {};

var pascalCase = _.flow(_.camelCase, _.upperFirst);
actions.upsertPage = function (page) {
  var plugin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

  page.componentChunkName = (0, _jsChunkNames.layoutComponentChunkName)(page.component);

  var jsonName = `${_.kebabCase(page.path)}.json`;
  var internalComponentName = `Component${pascalCase(page.path)}`;
  if (jsonName === `.json`) {
    jsonName = `index.json`;
    internalComponentName = `ComponentIndex`;
  }

  page.jsonName = jsonName;
  page.internalComponentName = internalComponentName;

  // Ensure the page has a context object
  if (!page.context) {
    page.context = {};
  }

  var result = _joi2.default.validate(page, joiSchemas.pageSchema);
  if (result.error) {
    console.log(_chalk2.default.blue.bgYellow(`The upserted page didn't pass validation`));
    console.log(_chalk2.default.bold.red(result.error));
    console.log(page);
    return;
  }

  return {
    type: "UPSERT_PAGE",
    payload: page
  };
};

actions.updateNode = function (node) {
  var plugin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

  if (!_.isObject(node)) {
    return console.log(_chalk2.default.bold.red(`The node passed to the "updateNode" action creator must be an object`));
  }
  var result = _joi2.default.validate(node, joiSchemas.nodeSchema);
  if (result.error) {
    console.log(_chalk2.default.bold.red(`The updated node didn't pass validation`));
    console.log(_chalk2.default.bold.red(result.error));
    console.log(node);
    return { type: `VALIDATION_ERROR`, error: true };
  }

  return {
    type: "UPDATE_NODE",
    plugin,
    payload: node
  };
};

actions.createNode = function (node) {
  var plugin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

  if (!_.isObject(node)) {
    return console.log(_chalk2.default.bold.red(`The node passed to the "createNode" action creator must be an object`));
  }
  var result = _joi2.default.validate(node, joiSchemas.nodeSchema);
  if (result.error) {
    console.log(_chalk2.default.bold.red(`The new node didn't pass validation`));
    console.log(_chalk2.default.bold.red(result.error));
    console.log(node);
    return { type: `VALIDATION_ERROR`, error: true };
  }

  // Check if the node has already been processed.
  if (getNode(node.id) && !hasNodeChanged(node.id, node.contentDigest)) {
    console.log("NODE_ALREADY_CREATED", node.pluginName, node.id);
    console.log(node);
    console.trace();
    // process.exit()
    return { type: `NODE_ALREADY_CREATED`, payload: node };
  }

  return {
    type: "CREATE_NODE",
    plugin,
    payload: node
  };
};

actions.updateSourcePluginStatus = function (status) {
  var plugin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

  return {
    type: `UPDATE_SOURCE_PLUGIN_STATUS`,
    plugin,
    payload: status
  };
};

actions.addPageDependency = function (_ref) {
  var path = _ref.path,
      nodeId = _ref.nodeId,
      connection = _ref.connection;
  var plugin = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

  return {
    type: `ADD_PAGE_DEPENDENCY`,
    plugin,
    payload: {
      path,
      nodeId,
      connection
    }
  };
};

actions.removePagesDataDependencies = function (paths) {
  return {
    type: `REMOVE_PAGES_DATA_DEPENDENCIES`,
    payload: {
      paths
    }
  };
};

actions.addPageComponent = function (componentPath) {
  return {
    type: `ADD_PAGE_COMPONENT`,
    payload: {
      componentPath
    }
  };
};

actions.setPageComponentQuery = function (_ref2) {
  var query = _ref2.query,
      componentPath = _ref2.componentPath;

  return {
    type: `SET_PAGE_COMPONENT_QUERY`,
    payload: {
      query,
      componentPath
    }
  };
};

exports.actions = actions;
exports.boundActionCreators = bindActionCreators(actions, store.dispatch);