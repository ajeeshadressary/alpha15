"use strict";

var _promise = require("babel-runtime/core-js/promise");

var _promise2 = _interopRequireDefault(_promise);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/***
 * Jobs of this module
 * - Maintain the list of components in the Redux store. So monitor new pages
 *   and add/remove components.
 * - Watch components for query changes and extract these and update the store.
 * - Ensure all page queries are run as part of bootstrap and report back when
 *   this is done
 * - Whenever a query changes, re-run all pages that rely on this query.
 ***/

var _ = require("lodash");
var chokidar = require("chokidar");

var _require = require("../redux/"),
    store = _require.store;

var _require2 = require("../redux/actions"),
    boundActionCreators = _require2.boundActionCreators;

var queryExtractor = require("./query-extractor");
var queryRunner = require("./query-runner");

var pageComponents = {};
var doneInitialQueryRun = [];

var watcher = chokidar.watch();
watcher.on("change", function (path) {
  queryExtractor(path).then(function (query) {
    // Check if the query has changed
    if (query !== store.getState().pageComponents[path].query) {
      boundActionCreators.setPageComponentQuery({
        query,
        componentPath: path
      });
      runQueriesForComponent(path);
    }
  });
});

var debounceNewPages = _.debounce(function () {
  store.dispatch({
    type: `BOOTSTRAP_STAGE`,
    payload: {
      stage: `COMPONENT_QUERIES_EXTRACTION_FINISHED`
    }
  });
}, 100);

// Watch for page updates.
store.subscribe(function () {
  var lastAction = store.getState().lastAction;
  if (lastAction.type === `UPSERT_PAGE`) {
    if (!pageComponents[lastAction.payload.component]) {
      // We haven't seen this component before so we:
      // - Add it to Redux
      // - Extract its query and save it
      // - Setup a watcher to detect query changes
      boundActionCreators.addPageComponent(lastAction.payload.component);
      queryExtractor(lastAction.payload.component).then(function (query) {
        boundActionCreators.setPageComponentQuery({
          query,
          componentPath: lastAction.payload.component
        });
        debounceNewPages();
      });
      watcher.add(lastAction.payload.component);
    }

    // Mark we've seen this page component.
    pageComponents[lastAction.payload.component] = lastAction.payload.component;
  }
});

var runQueriesForComponent = function runQueriesForComponent(componentPath) {
  var pages = getPagesForComponent(componentPath);
  console.log("running queries for", pages.map(function (p) {
    return p.path;
  }));
  // Remove page data dependencies before re-running queries because
  // the changing of the query could have changed the data dependencies.
  // Re-running the queries will add back data dependencies.
  boundActionCreators.removePagesDataDependencies(pages.map(function (p) {
    return p.path;
  }));
  var component = store.getState().pageComponents[componentPath];
  return _promise2.default.all(pages.map(function (p) {
    return queryRunner(p, component);
  }));
};

var getPagesForComponent = function getPagesForComponent(componentPath) {
  return store.getState().pages.filter(function (p) {
    return p.component === componentPath;
  });
};