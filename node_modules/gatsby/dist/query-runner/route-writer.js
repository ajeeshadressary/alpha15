"use strict";

var _jsChunkNames = require("../utils/js-chunk-names");

var _ = require("lodash");
var glob = require("glob");
var parseFilepath = require("parse-filepath");
var fs = require("fs");

var _require = require("../redux/"),
    store = _require.store;

// Write out routes file.
// Loop through all paths and write them out to child-routes.js
var writeChildRoutes = function writeChildRoutes() {
  var _store$getState = store.getState(),
      program = _store$getState.program,
      config = _store$getState.config,
      pages = _store$getState.pages;

  var childRoutes = ``;
  var splitChildRoutes = ``;

  var genChildRoute = function genChildRoute(page, noPath) {
    var pathStr = ``;
    if (!noPath) {
      pathStr = `path:'${page.path}',`;
    }
    return `
      {
        ${pathStr}
        component: ${page.internalComponentName},
      },
    `;
  };

  var genSplitChildRoute = function genSplitChildRoute(page) {
    var noPath = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    var pathName = (0, _jsChunkNames.pathChunkName)(page.path);
    var layoutName = (0, _jsChunkNames.layoutComponentChunkName)(program.directory, page.component);
    var pathStr = ``;
    if (!noPath) {
      if (program.prefixLinks) {
        pathStr = `path:'${_.get(config, `linkPrefix`, ``)}${page.path}',`;
      } else {
        pathStr = `path:'${page.path}',`;
      }
    }

    return `
      { ${pathStr}
        getComponent (nextState, cb) {
          require.ensure([], (require) => {
            const Component = preferDefault(require('${page.component}'))
            require.ensure([], (require) => {
              const data = require('./json/${page.jsonName}')
              cb(null, () => <Component {...nextState} {...data} />)
            }, '${pathName}')
          }, '${layoutName}')
        }
      },
    `;
  };

  // Group pages under their layout component (if any).
  var defaultLayoutExists = true;
  if (glob.sync(`${program.directory}/src/layouts/default.*`).length === 0) {
    defaultLayoutExists = false;
  }
  var groupedPages = _.groupBy(pages, function (page) {
    // If is a string we'll assume it's a working layout component.
    if (_.isString(page.layout)) {
      return page.layout;
      // If the user explicitely turns off layout, put page in undefined bucket.
    } else if (page.layout === false) {
      return `undefined`;
      // Otherwise assume the default layout should handle this page.
    } else if (defaultLayoutExists) {
      return `default`;
      // We got nothing left, undefined.
    } else {
      return `undefined`;
    }
  });
  var rootRoute = `{ childRoutes: [`; // We close this out at the bottom.
  var splitRootRoute = `{ childRoutes: [`; // We close this out at the bottom.
  _.forEach(groupedPages, function (pages, layout) {
    var route = `{`;
    var splitRoute = `{`;
    if (layout === `undefined`) {
      // If a layout isn't defined then don't provide an index route, etc.
      route += `childRoutes: [`;
      splitRoute += `childRoutes: [`;
      pages.forEach(function (page) {
        route += genChildRoute(page);
        splitRoute += genSplitChildRoute(page);
      });
      route += `]},`;
      splitRoute += `]},`;
      rootRoute += route;
      splitRootRoute += splitRoute;
    } else {
      var indexPage = void 0;
      indexPage = pages.find(function (page) {
        return parseFilepath(page.component).name === `index`;
      });

      // If there's not an index page, just pick the one with the shortest path.
      // Probably a bad heuristic.
      if (!indexPage) {
        indexPage = _(pages).sortBy(pages, function (page) {
          return page.path.length;
        }).first();
      }
      var _route = `
      {
        path: '${indexPage.path}',
        component: preferDefault(require('${program.directory}/src/layouts/${layout}')),
        indexRoute: ${genChildRoute(indexPage, true)}
        childRoutes: [
      `;
      var pathStr = void 0;
      if (program.prefixLinks) {
        pathStr = `path:'${_.get(config, `linkPrefix`, ``)}${indexPage.path}',`;
      } else {
        pathStr = `path:'${indexPage.path}',`;
      }
      var _splitRoute = `
      {
        ${pathStr}
        component: preferDefault(require('${program.directory}/src/layouts/${layout}')),
        indexRoute: ${genSplitChildRoute(indexPage, true)}
        childRoutes: [
      `;
      pages.forEach(function (page) {
        _route += genChildRoute(page);
        _splitRoute += genSplitChildRoute(page);
      });

      _route += `]},`;
      _splitRoute += `]},`;
      rootRoute += _route;
      splitRootRoute += _splitRoute;
    }
  });

  // Add a fallback 404 route if one is defined.
  var notFoundPage = pages.find(function (page) {
    return page.path.indexOf("/404") !== -1;
  });

  if (notFoundPage) {
    var defaultLayout = `preferDefault(require('${program.directory}/src/layouts/default'))`;
    var notFoundPageStr = `
      {
        path: "*",
        component: ${defaultLayout},
        indexRoute: {
          component: preferDefault(require('${notFoundPage.component}')),
        },
      },
    `;
    var pathName = (0, _jsChunkNames.pathChunkName)(notFoundPage.path);
    var layoutName = (0, _jsChunkNames.layoutComponentChunkName)(program.directory, notFoundPage.component);
    var notFoundPageSplitStr = `
      {
        path: "*",
        component: ${defaultLayout},
        indexRoute: {
          getComponent (nextState, cb) {
            require.ensure([], (require) => {
              const Component = preferDefault(require('${notFoundPage.component}'))
              require.ensure([], (require) => {
                const data = require('./json/${notFoundPage.jsonName}')
                cb(null, () => <Component {...nextState} {...data} />)
              }, '${pathName}')
            }, '${layoutName}')
          }
        },
      },
    `;

    rootRoute += notFoundPageStr;
    splitRootRoute += notFoundPageSplitStr;
  }

  // Close out object.
  rootRoute += `]}`;
  splitRootRoute += `]}`;
  var componentsStr = pages.map(function (page) {
    return `class ${page.internalComponentName} extends React.Component {
          render () {
            const Component = preferDefault(require('${page.component}'))
            const data = require('./json/${page.jsonName}')
            return <Component {...this.props} {...data} />
          }
        }`;
  }).join(`\n`);

  childRoutes = `
    import React from 'react'

    // prefer default export if available
    const preferDefault = m => m && m.default || m

    /**
     * Warning from React Router, caused by react-hot-loader.
     * The warning can be safely ignored, so filter it from the console.
     * Otherwise you'll see it every time something changes.
     * See https://github.com/gaearon/react-hot-loader/issues/298
     */
    if (module.hot) {
        const isString = require('lodash/isString')

      const orgError = console.error;
      console.error = (...args) => {
      if (args && args.length === 1 && isString(args[0]) && args[0].indexOf('You cannot change <Router routes>;') > -1) {
        // React route changed
      } else {
        // Log the error as normally
        orgError.apply(console, args);
      }
      };
    }

    ${componentsStr}
    const rootRoute = ${rootRoute}
    module.exports = rootRoute`;
  splitChildRoutes = `
    import React from 'react'

    // prefer default export if available
    const preferDefault = m => m && m.default || m
    const rootRoute = ${splitRootRoute}
    module.exports = rootRoute`;
  fs.writeFileSync(`${program.directory}/.cache/child-routes.js`, childRoutes);
  fs.writeFileSync(`${program.directory}/.cache/split-child-routes.js`, splitChildRoutes);
};

var writtenOnce = false;
var oldPages = void 0;
var writeRoutes = _.debounce(function () {
  if (!writtenOnce || !_.isEqual(oldPages, store.getState().pages)) {
    writeChildRoutes();
    writtenOnce = true;
    oldPages = store.getState().pages;
  }
}, 250);

store.subscribe(function () {
  if (store.getState().lastAction.type === `UPSERT_PAGE`) {
    writeRoutes();
  }
});