"use strict";

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _bluebird = require("bluebird");

var _bluebird2 = _interopRequireDefault(_bluebird);

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _glob = require("glob");

var _glob2 = _interopRequireDefault(_glob);

var _lodash = require("lodash");

var _lodash2 = _interopRequireDefault(_lodash);

var _slash = require("slash");

var _slash2 = _interopRequireDefault(_slash);

var _createPath = require("./create-path");

var _createPath2 = _interopRequireDefault(_createPath);

var _fsExtra = require("fs-extra");

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _apiRunnerNode = require("../utils/api-runner-node");

var _apiRunnerNode2 = _interopRequireDefault(_apiRunnerNode);

var _graphql = require("graphql");

var _redux = require("../redux");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require("../redux/actions"),
    boundActionCreators = _require.boundActionCreators;

// Start off the query running.


require("../query-runner");
var isInitialPageQueryingDone = require("../query-runner/page-query-runner");

// Override console.log to add the source file + line number.
// ["log", "warn"].forEach(function(method) {
// var old = console[method];
// console[method] = function() {
// var stack = new Error().stack.split(/\n/);
// // Chrome includes a single "Error" line, FF doesn't.
// if (stack[0].indexOf("Error") === 0) {
// stack = stack.slice(1);
// }
// var args = [].slice.apply(arguments).concat([stack[1].trim()]);
// return old.apply(console, args);
// };
// });

var preferDefault = function preferDefault(m) {
  return m && m.default || m;
};

var mkdirs = _bluebird2.default.promisify(_fsExtra2.default.mkdirs);
var copy = _bluebird2.default.promisify(_fsExtra2.default.copy);
var glob = _bluebird2.default.promisify(_glob2.default);

// Path creator.
// Auto-create pages.
// algorithm is glob /pages directory for js/jsx/cjsx files *not*
// underscored. Then create url w/ our path algorithm *unless* user
// takes control of that page component in gatsby-node.
var autoPathCreator = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee() {
    var _store$getState, program, pagesDirectory, exts, files, autoPages;

    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _store$getState = _redux.store.getState(), program = _store$getState.program;
            pagesDirectory = _path2.default.posix.join(program.directory, `/src/pages`);
            exts = program.extensions.map(function (e) {
              return `*${e}`;
            }).join("|");
            // The promisified version wasn't working for some reason
            // so we'll use sync for now.

            files = glob.sync(`${pagesDirectory}/**/?(${exts})`);
            // Create initial page objects.

            autoPages = files.map(function (filePath) {
              return {
                component: filePath,
                path: filePath
              };
            });

            // Convert path to one relative to the pages directory.

            autoPages = autoPages.map(function (page) {
              return (0, _extends3.default)({}, page, {
                path: _path2.default.posix.relative(pagesDirectory, page.path)
              });
            });

            // Remove pages starting with an underscore.
            autoPages = _lodash2.default.filter(autoPages, function (page) {
              return page.path.slice(0, 1) !== `_`;
            });

            // Remove page templates.
            autoPages = _lodash2.default.filter(autoPages, function (page) {
              return page.path.slice(0, 9) !== `template-`;
            });

            // Convert to our path format.
            autoPages = autoPages.map(function (page) {
              return (0, _extends3.default)({}, page, {
                path: (0, _createPath2.default)(pagesDirectory, page.component)
              });
            });

            // Add pages
            autoPages.forEach(function (page) {
              boundActionCreators.upsertPage(page);
            });

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, undefined);
  }));

  return function autoPathCreator() {
    return _ref.apply(this, arguments);
  };
}();

module.exports = function () {
  var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(program) {
    var config, plugins, processPlugin, flattenedPlugins, extractPlugins, srcDir, siteDir, hasAPIFile, ssrPlugins, browserPlugins, browserAPIRunner, browserPluginsRequires, sSRAPIRunner, ssrPluginsRequires, graphqlRunner, extensions, apiResults, exists404html;
    return _regenerator2.default.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            console.log(`lib/bootstrap/index.js time since started:`, process.uptime());

            // Fix program directory path for windows env
            program.directory = (0, _slash2.default)(program.directory);

            _redux.store.dispatch({
              type: "SET_PROGRAM",
              payload: program
            });

            // Try opening the site's gatsby-config.js file.
            console.time(`open and validate gatsby-config.js`);
            config = {};

            try {
              config = preferDefault(require(`${program.directory}/gatsby-config`));
            } catch (e) {
              console.log(`Couldn't open your gatsby-config.js file`);
              console.log(e);
              process.exit();
            }

            _redux.store.dispatch({
              type: "SET_SITE_CONFIG",
              payload: config
            });

            console.timeEnd(`open and validate gatsby-config.js`);

            // Instantiate plugins.
            plugins = [];
            // Create fake little site with a plugin for testing this
            // w/ snapshots. Move plugin processing to its own module.
            // Also test adding to redux store.

            processPlugin = function processPlugin(plugin) {
              if (_lodash2.default.isString(plugin)) {
                var resolvedPath = (0, _slash2.default)(_path2.default.dirname(require.resolve(plugin)));
                var packageJSON = JSON.parse(_fsExtra2.default.readFileSync(`${resolvedPath}/package.json`, `utf-8`));
                return {
                  resolve: resolvedPath,
                  name: packageJSON.name,
                  version: packageJSON.version,
                  pluginOptions: {
                    plugins: []
                  }
                };
              } else {
                // Plugins can have plugins.
                var subplugins = [];
                if (plugin.options && plugin.options.plugins) {
                  plugin.options.plugins.forEach(function (p) {
                    subplugins.push(processPlugin(p));
                  });
                }
                plugin.options.plugins = subplugins;

                var _resolvedPath = (0, _slash2.default)(_path2.default.dirname(require.resolve(plugin.resolve)));
                var _packageJSON = JSON.parse(_fsExtra2.default.readFileSync(`${_resolvedPath}/package.json`, `utf-8`));
                return {
                  resolve: _resolvedPath,
                  name: _packageJSON.name,
                  version: _packageJSON.version,
                  pluginOptions: _lodash2.default.merge({ plugins: [] }, plugin.options)
                };
              }
            };

            if (config.plugins) {
              config.plugins.forEach(function (plugin) {
                plugins.push(processPlugin(plugin));
              });
            }

            // Add the site's default "plugin" i.e. gatsby-x files in root of site.
            plugins.push({
              resolve: (0, _slash2.default)(process.cwd()),
              name: `defaultSitePlugin`,
              version: `n/a`,
              pluginOptions: {
                plugins: []
              }
            });

            // Create a "flattened" array of plugins with all subplugins brought to the top-level.
            // This simplifies running gatsby-* files for subplugins.
            flattenedPlugins = [];

            extractPlugins = function extractPlugins(plugin) {
              plugin.pluginOptions.plugins.forEach(function (subPlugin) {
                flattenedPlugins.push(subPlugin);
                extractPlugins(subPlugin);
              });
            };

            plugins.forEach(function (plugin) {
              flattenedPlugins.push(plugin);
              extractPlugins(plugin);
            });

            _redux.store.dispatch({
              type: "SET_SITE_PLUGINS",
              payload: plugins
            });

            _redux.store.dispatch({
              type: "SET_SITE_FLATTENED_PLUGINS",
              payload: flattenedPlugins
            });

            // Ensure the public directory is created.
            _context2.next = 19;
            return mkdirs(`${program.directory}/public`);

          case 19:

            // Copy our site files to the root of the site.
            console.time(`copy gatsby files`);
            srcDir = `${__dirname}/../cache-dir`;
            siteDir = `${program.directory}/.cache`;
            _context2.prev = 22;
            _context2.next = 25;
            return copy(srcDir, siteDir, { clobber: true });

          case 25:
            _context2.next = 27;
            return mkdirs(`${program.directory}/.cache/json`);

          case 27:
            _context2.next = 33;
            break;

          case 29:
            _context2.prev = 29;
            _context2.t0 = _context2["catch"](22);

            console.log(`Unable to copy site files to .cache`);
            console.log(_context2.t0);

          case 33:

            // Find plugins which implement gatsby-browser and gatsby-ssr and write
            // out api-runners for them.
            hasAPIFile = function hasAPIFile(env, plugin) {
              return glob.sync(`${plugin.resolve}/gatsby-${env}*`)[0];
            };

            ssrPlugins = _lodash2.default.filter(flattenedPlugins.map(function (plugin) {
              return {
                resolve: hasAPIFile(`ssr`, plugin),
                options: plugin.pluginOptions
              };
            }), function (plugin) {
              return plugin.resolve;
            });
            browserPlugins = _lodash2.default.filter(flattenedPlugins.map(function (plugin) {
              return {
                resolve: hasAPIFile(`browser`, plugin),
                options: plugin.pluginOptions
              };
            }), function (plugin) {
              return plugin.resolve;
            });
            browserAPIRunner = _fsExtra2.default.readFileSync(`${siteDir}/api-runner-browser.js`, `utf-8`);
            browserPluginsRequires = browserPlugins.map(function (plugin) {
              return `{
      plugin: require('${plugin.resolve}'),
      options: ${(0, _stringify2.default)(plugin.options)},
    }`;
            }).join(`,`);

            browserAPIRunner = `var plugins = [${browserPluginsRequires}]\n${browserAPIRunner}`;

            sSRAPIRunner = _fsExtra2.default.readFileSync(`${siteDir}/api-runner-ssr.js`, `utf-8`);
            ssrPluginsRequires = ssrPlugins.map(function (plugin) {
              return `{
      plugin: require('${plugin.resolve}'),
      options: ${(0, _stringify2.default)(plugin.options)},
    }`;
            }).join(`,`);

            sSRAPIRunner = `var plugins = [${ssrPluginsRequires}]\n${sSRAPIRunner}`;

            _fsExtra2.default.writeFileSync(`${siteDir}/api-runner-browser.js`, browserAPIRunner, `utf-8`);
            _fsExtra2.default.writeFileSync(`${siteDir}/api-runner-ssr.js`, sSRAPIRunner, `utf-8`);

            console.timeEnd(`copy gatsby files`);

            // Create Schema.
            _context2.next = 47;
            return require(`../schema`)();

          case 47:
            graphqlRunner = function graphqlRunner(query, context) {
              var schema = _redux.store.getState().schema;
              return (0, _graphql.graphql)(schema, query, context, context, context);
            };

            // Collect resolvable extensions and attach to program.


            extensions = [`.js`, `.jsx`];
            _context2.next = 51;
            return (0, _apiRunnerNode2.default)("resolvableExtensions");

          case 51:
            apiResults = _context2.sent;


            _redux.store.dispatch({
              type: "SET_PROGRAM_EXTENSIONS",
              payload: _lodash2.default.flattenDeep([extensions, apiResults])
            });

            // Collect pages.
            _context2.next = 55;
            return (0, _apiRunnerNode2.default)(`createPages`, {
              graphql: graphqlRunner
            });

          case 55:

            // TODO move this to own source plugin per component type
            // (js/cjsx/typescript, etc.). Only do after there's themes
            // so can cement default /pages setup in default core theme.
            autoPathCreator();

            // Copy /404/ to /404.html as many static site hosting companies expect
            // site 404 pages to be named this.
            // https://www.gatsbyjs.org/docs/add-404-page/
            exists404html = _lodash2.default.some(_redux.store.getState().pages, function (p) {
              return p.path === `/404.html`;
            });

            if (!exists404html) {
              _redux.store.getState().pages.forEach(function (page) {
                if (page.path === `/404/`) {
                  boundActionCreators.upsertPage((0, _extends3.default)({}, page, {
                    path: `/404.html`
                  }));
                }
              });
            }

            console.log(`created js pages`);

            return _context2.abrupt("return", new _bluebird2.default(function (resolve) {
              isInitialPageQueryingDone(function () {
                (0, _apiRunnerNode2.default)(`generateSideEffects`).then(function () {
                  console.log(`bootstrap finished, time since started: ${process.uptime()}`);

                  resolve({ graphqlRunner });
                });
              });
            }));

          case 60:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2, undefined, [[22, 29]]);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();