"use strict";

var _regenerator = require("babel-runtime/regenerator");

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require("babel-runtime/helpers/extends");

var _extends3 = _interopRequireDefault(_extends2);

var _stringify = require("babel-runtime/core-js/json/stringify");

var _stringify2 = _interopRequireDefault(_stringify);

var _asyncToGenerator2 = require("babel-runtime/helpers/asyncToGenerator");

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var onNodeCreate = function () {
  var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(_ref2) {
    var node = _ref2.node,
        boundActionCreators = _ref2.boundActionCreators,
        loadNodeContent = _ref2.loadNodeContent;
    var createNode, updateNode, content, JSONArray;
    return _regenerator2.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            createNode = boundActionCreators.createNode, updateNode = boundActionCreators.updateNode;

            // Don't reprocess our own nodes!  (note: this doesn't normally happen
            // but since this transformer creates new nodes with the same media-type
            // as its parent node, we have to add this check that we didn't create
            // the node).

            if (!(node.pluginName === `gatsby-transformer-json`)) {
              _context.next = 3;
              break;
            }

            return _context.abrupt("return");

          case 3:
            if (!(node.mediaType !== `application/json`)) {
              _context.next = 5;
              break;
            }

            return _context.abrupt("return");

          case 5:
            _context.next = 7;
            return loadNodeContent(node);

          case 7:
            content = _context.sent;
            JSONArray = JSON.parse(content).map(function (obj, i) {
              var objStr = (0, _stringify2.default)(obj);
              var contentDigest = crypto.createHash("md5").update(objStr).digest("hex");

              return (0, _extends3.default)({}, obj, {
                id: obj.id ? obj.id : `${ node.id } [${ i }] >>> JSON`,
                contentDigest,
                mediaType: `application/json`,
                parent: node.id,
                // TODO make choosing the "type" a lot smarter. This assumes
                // the parent node is a file.
                type: _.capitalize(node.name),
                children: [],
                content: objStr
              });
            });


            node.children = node.children.concat(JSONArray.map(function (n) {
              return n.id;
            }));
            updateNode(node);
            _.each(JSONArray, function (j) {
              return createNode(j);
            });

            return _context.abrupt("return");

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  return function onNodeCreate(_x) {
    return _ref.apply(this, arguments);
  };
}();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var select = require("unist-util-select");
var Promise = require("bluebird");
var fs = require("fs");
var _ = require("lodash");
var crypto = require("crypto");

exports.onNodeCreate = onNodeCreate;